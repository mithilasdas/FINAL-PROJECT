# -*- coding: utf-8 -*-
"""project model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EYfyrjAR5ye5RZtpZRtRGGKk5G8c5WC_
"""

#import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")

#load data
data=pd.read_csv('city_data.csv')

data

#check shape
data.shape

#check columns
data.columns

#get data information
data.info()

#drop the column unnamed
data=data.drop(columns='Unnamed: 0')

data

#check data types
data.dtypes

"""# filling null values"""

#check null values
data.isna().sum()

#backward and forward filling
data['PM2.5'].fillna(method = 'bfill',inplace = True )
data['PM10'].fillna(method = 'bfill',inplace = True )
data['NO'].fillna(method = 'ffill',inplace = True )
data['NO2'].fillna(method = 'ffill',inplace = True )
data['NOx'].fillna(method = 'ffill',inplace = True )
data['NH3'].fillna(method = 'bfill',inplace = True )
data['CO'].fillna(method = 'ffill',inplace = True )
data['SO2'].fillna(method = 'ffill',inplace = True )
data['O3'].fillna(method = 'ffill',inplace = True )
data['Benzene'].fillna(method = 'ffill',inplace = True )
data['Toluene'].fillna(method = 'ffill',inplace = True )
data['Xylene'].fillna(method = 'ffill',inplace = True )
data['AQI'].fillna(method = 'bfill',inplace = True )
data['AQI_Bucket'].fillna(method = 'bfill',inplace = True )

#recheck null values
data.isna().sum()

#convert to datetime
data['Date']=pd.to_datetime(data['Date'])
data['year']=data['Date'].apply(lambda x:x.year)
data['month']=data['Date'].apply(lambda x:x.month)



"""pollutants are PM2.5, PM10, NO, NO2, NOx, NH3, CO, SO2, O3, Benzene, Toluene"""

most_polluted=data[['City','AQI','PM2.5','PM10','NO','NO2','NOx','NH3','CO','SO2','O3','Benzene','Toluene','Xylene',]].groupby(['City']).mean().sort_values(by = 'AQI', ascending = False)
most_polluted

"""# Exploratory Data Analysis"""

plt.figure(figsize=(6,6))
most_polluted['AQI'].plot(kind='pie', subplots=True, autopct='%1.1f%%')
plt.title('Most polluted ')
print('Most polluted city is Ahmedabad,followed by Delhi, Lucknow, Kolkata and Thiruvananthapuram')

"""Vehicular Pollution content (PM2.5, PM10, NO2, NH3, CO,) and Industrial Pollution content (CO, SO2, O3, Benzene, Toluene, Xylene)"""

data['Vehicular Pollution content'] = data['PM2.5']+data['PM10']+data['NO']+data['NO2']+data['NOx']+data['NH3']+data['CO']

data['Industrial Pollution content'] = data['SO2']+data['O3']+data['Benzene']+data['Toluene']+data['Xylene']

"""bivariate"""

plt.figure(figsize=(12,5))
sns.barplot( x='City', y='Industrial Pollution content',data=data)
plt.title('city vs Industrial Pollution content ')
plt.show

"""Industrial Pollution content is highest in Ahmedabad,followed by Delhi, Kolkata, Lucknow and Thiruvananthapuram"""

plt.figure(figsize=(12,5))
sns.barplot( x='City', y='Vehicular Pollution content', data=data)
plt.title('city vs Vehicular Pollution content ')
plt.show

"""Vehicular Pollution content is highest in Delhi,followed by Ahmedabad, Kolkata, Lucknow and Thiruvananthapuram

multivariate
"""

plt.figure(figsize=(12,5))
sns.barplot( x='City', y='Industrial Pollution content',hue='AQI_Bucket',data=data)
plt.title('city vs Industrial Pollution content ')
plt.show

plt.figure(figsize=(12,5))
sns.barplot( x='City', y='Vehicular Pollution content',hue='AQI_Bucket', data=data)
plt.title('city vs Vehicular Pollution content ')
plt.show

"""# EDA of Ahemedabad"""

data_Ahmedabad=data[(data["City"]=="Ahmedabad")]

data_Ahmedabad=data_Ahmedabad.drop(columns='Date')

data_Ahmedabad

data_Ahmedabad.head()

data_Ahmedabad.tail()

df_Ahmedabad=data.iloc[0:2009]

df_Ahmedabad

"""univariate"""

plt.figure(figsize=(7,7))
df_Ahmedabad['AQI_Bucket'].value_counts().plot(kind='pie',subplots=True, autopct='%1.1f%%')
plt.title('Satisfactory level of Ahmedabad')

"""The AQI of Ahmedabad was severe for almost 33.2% of the period, while the satisfactory level was only 2.2%"""

df = {'Pollutant':['PM2.5', "PM10", "NO", "NO2","NOx", "NH3", "CO", "SO2", "O3", "Benzene","Toluene","Xylene"], 
                   'value': [63.344296,136.318935,17.946491,47.434689,41.755495,33.850000,17.782997,53.282220,38.936984,5.325326,24.226884,3.832494]}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j','k','l']

Ahmedabad= pd.DataFrame(df, index= labels)
Ahmedabad

sns.barplot(x="Pollutant",y="value",data=df,palette= "magma")
plt.xticks(rotation=90)
plt.title("Ahmedabad Pollutant Analysis")

"""In Ahmedabad,the concentration of PM10 was found to be the highest among all pollutants followed by PM 2.5 and Benzene and Xylene being the lowest

bivariate
"""

plt.figure(figsize=(12,5))
plt.subplot(1,2,1)
sns.lineplot(data=df_Ahmedabad, x="year", y="Vehicular Pollution content")
plt.title('Year wise Vehicular Pollution content of Ahmedabad')
plt.subplot(1,2,2)
sns.lineplot(data=df_Ahmedabad, x="year", y="Industrial Pollution content")
plt.title('Year wise Industrial Pollution content of Ahmedabad ')
plt.show

"""vehicular pollution content declined from 2015 to 2016, gradually rose between 2016-2017,followed by a steep rise from 2017-2018 and declining through 2019 and 2020

industrial pollution content showed gradual rise from 2016 to 2019,and declining through 2020

multivariate
"""

plt.figure(figsize=(12,7))
plt.subplots_adjust(hspace = 0.5)
plt.subplot(2,2,1)
axis1=sns.lineplot(data=df_Ahmedabad, x="year", y='PM2.5', color = 'r',label='pm2.5')
axis1 =sns.lineplot(data=df_Ahmedabad, x="year", y='PM10', color = 'b',label='pm10')
plt.title('Particulate Matter Distribuitionof Ahmedabad ')
plt.legend(loc='upper left')
axis1.set_xlabel('')  
plt.subplot(2,2,2)
axis2 = sns.lineplot(data=df_Ahmedabad, x="year", y='NO', color = 'r',label='NO')
axis2 = sns.lineplot(data=df_Ahmedabad, x="year", y='NO2', color = 'b',label='NO2')
axis2 = sns.lineplot(data=df_Ahmedabad, x="year", y='NOx', color = 'g',label='NOx')
plt.title('Nitrous Oxides Distribution of Ahmedabad')
plt.legend(loc='upper left')
axis2.set_xlabel('')  
plt.subplot(2,2,3)
axis3 = sns.lineplot(data=df_Ahmedabad, x="year", y='CO', color = 'r',label='CO')
axis3 = sns.lineplot(data=df_Ahmedabad, x="year", y='SO2', color = 'b',label='SO2')
axis3 = sns.lineplot(data=df_Ahmedabad, x="year", y='O3', color = 'g',label='O3')
plt.title('CO, SO2 & Ground Level Ozone Distribution of Ahmedabad')
plt.legend(loc='upper left')
axis3.set_xlabel('')  
plt.subplot(2,2,4)
axis4 = sns.lineplot(data=df_Ahmedabad, x="year", y='Benzene', color = 'r',label='Benzene')
axis4 = sns.lineplot(data=df_Ahmedabad, x="year", y='Toluene', color = 'b',label='Toluene')
axis4 = sns.lineplot(data=df_Ahmedabad, x="year", y='Xylene', color = 'g',label='Xylene')
plt.title('Benzene, Toluene & Xylene Distribution of Ahmedabad')
plt.legend(loc='upper left')
axis4.set_xlabel('')  
plt.show()

"""PM10 remained high through 2015-2018 and declined from 2018-2020

PM2.5 showed a decline from 2015-2016 followed by a rise between 2016 -2018 and declined from 2018-2020

NO2 and NOx showed a slight decline from 2015-2017, followed by a steep rise from 2017-2018, gradual increase from 2018-2019 and declining from 2019-2020

NO showed a slight decline from 2015-2017, followed by a rise from 2017-2018, gradual decrease from 2018-2020 

SO2 showed a steep rise from 2016-2017, followed by a slight decrease from 2017-2018 and slight increase from 2018-2019 and steep decline from 2019-2020

O3 stayed almost constant through 2015-2018, follwed by an increase from 2018-2019 and slight decline from 2019-2020

CO showed a slight decline through 2015-2016,followed by slight increase through 2016-2017,followed by a steep rise from 2017-2018 and declining through 2018-2020

Toluene showed a slight decline through 2015-2017, followed by a steep rise from 2017-2018, increasing through 2018-2019 and declining through 2019-2020

Benzene and Xylene stayed almost constant from 2015-2017,increasing slightly from 2017-2018 and declining from 2018-2020

# EDA of Delhi
"""

data_Delhi=data[(data["City"]=="Delhi")]
data_Delhi=data_Delhi.drop(columns='Date')

data_Delhi.head()

data_Delhi.tail()

df_delhi=data.iloc[2009:4018]

df_delhi

"""univariate"""

plt.figure(figsize=(7,7))
df_delhi['AQI_Bucket'].value_counts().plot(kind='pie',subplots=True, autopct='%1.1f%%')
plt.title('Satisfactory level of Delhi')

"""The AQI of Delhi was poor for almost 27.9% and good level was only 1%"""

df2 = {'Pollutant':['PM2.5', "PM10", "NO", "NO2","NOx", "NH3", "CO", "SO2", "O3", "Benzene","Toluene","Xylene"], 
                   'value': [117.105903,228.247048,38.971533,50.769856,58.567023,41.987641,1.976053,16.026446,50.816546,3.544480,17.185042,1.015037]}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j','k','l']

delhi = pd.DataFrame(df2, index= labels)
delhi

sns.barplot(x="Pollutant",y="value",data=delhi,palette= "magma")
plt.xticks(rotation=90)
plt.title("Delhi Pollutant Analysis")

"""bivariate

In Delhi,the concentration of PM10 was found to be the highest among all pollutants followed by PM 2.5 and CO and Xylene being the lowest
"""

plt.figure(figsize=(12,5))
plt.subplot(1,2,1)
sns.lineplot(data=df_delhi, x="year", y="Vehicular Pollution content")
plt.title('Yearwise Vehicular Pollution content of Delhi')
plt.subplot(1,2,2)
sns.lineplot(data=df_delhi, x="year", y="Industrial Pollution content")
plt.title('Yearwise Industrial Pollution content of Delhi')
plt.show

"""vehicular pollution content increased from 2015-2016 and decreased through 2016-2020

industrial pollution content showed gradual rise from 2015 to 2016,and declined from 2016-2017 and slight increase from 2017-2018 and attained a stable state from 2018-2019 and decreased through 2019-2020

multivariate
"""

plt.figure(figsize=(12,7))
plt.subplots_adjust(hspace = 0.5)
plt.subplot(2,2,1)
axis1=sns.lineplot(data=df_delhi, x="year", y='PM2.5', color = 'r',label='pm2.5')
axis1 =sns.lineplot(data=df_delhi, x="year", y='PM10', color = 'b',label='pm10')
plt.title('Particulate Matter Distribuition of Delhi')
plt.legend()
axis1.set_xlabel('')  
plt.subplot(2,2,2)
axis2 = sns.lineplot(data=df_delhi, x="year", y='NO', color = 'r',label='NO')
axis2 = sns.lineplot(data=df_delhi, x="year", y='NO2', color = 'b',label='NO2')
axis2 = sns.lineplot(data=df_delhi, x="year", y='NOx', color = 'g',label='NOx')
plt.title('Nitrous Oxides Distribution of Delhi')
plt.legend()
axis2.set_xlabel('')  
plt.subplot(2,2,3)
axis3 = sns.lineplot(data=df_delhi, x="year", y='CO', color = 'r',label='CO')
axis3 = sns.lineplot(data=df_delhi, x="year", y='SO2', color = 'b',label='SO2')
axis3 = sns.lineplot(data=df_delhi, x="year", y='O3', color = 'g',label='O3')
plt.title('CO, SO2 & Ground Level Ozone Distribution of Delhi')
plt.legend()
axis3.set_xlabel('')  
plt.subplot(2,2,4)
axis4 =sns.lineplot(data=df_delhi, x="year", y='Benzene', color = 'r',label='Benzene')
axis4 = sns.lineplot(data=df_delhi, x="year", y='Toluene', color = 'b',label='Toluene')
axis4 = sns.lineplot(data=df_delhi, x="year", y='Xylene', color = 'g',label='Xylene')
plt.title('Benzene, Toluene & Xylene Distribution of Delhi')
plt.legend() 
axis4.set_xlabel('')  
plt.show()

"""PM10 remained high through 2015-2016,declined from 2016-2017,icreased from 2017-2018 and declined through 2018-2020

PM2.5 showed a rise from 2015-2016 followed by a declinr between 2016 -2020

NO2 showed an increase from 2015-2016, followed by a decline from 2016-2018,slight increase from 2018-2019 and declined through 2019-2020

NOx showed a decrease from 2015-2016, followed by a steep decline from 2016-2017, increased from 2017-2018 and declined through 2018-2020

NO showed an increase from 2015-2016, followed by an increase from 2016-2017, and declined through 2017-2020

SO2 showed a slight increase through 2015-2017 and decrease from 2017-18 and then remained constant through 2018-2020

O3 showed an increase from 2015-2016 and steep decrease from 2016-2017, slight increase from 2017-2018,slight decrease from 2018-2019 and then increase from 2019-2020

CO showed a slight decrease from 2015-201616 and then remained constant through 2016-2020

Toluene showed a slight increase from 2015-2016,decresed from 2016-2017, followed by a steep rise from 2017-2018, increased from 2018-2019 and declined through 2019-2020

Benzyne showed slight increase from 2015-2016,slight decrease from 2016-2017,then slight increase from 2017-2019 and declined from 2019-2020.

Xylene showed a decrease from 2015-2016,remained constant from 2016-2017,slight increase from 2017-2018 and then declined from 2018-2020

# EDA of Kolkata
"""

data_kolkata=data[(data["City"]=="Kolkata")]
data_kolkata=data_kolkata.drop(columns='Date')

data_kolkata.head()

data_kolkata.tail()

df_kolkata=data.iloc[4018:4832]

df_kolkata

"""univariate"""

plt.figure(figsize=(7,7))
df_kolkata['AQI_Bucket'].value_counts().plot(kind='pie',subplots=True, autopct='%1.1f%%')
plt.title('Satisfactory level of Kolkata')

"""The AQI of Kolkata was satisfactory for 35.1% and severe was only 1.7%"""

df3 = {'Pollutant':['PM2.5', "PM10", "NO", "NO2","NOx", "NH3", "CO", "SO2", "O3", "Benzene","Toluene","Xylene"], 
                   'value': [60.883145,110.248452,26.703514,40.120958,63.308501,18.370381,0.799251,9.268034,31.252531,10.858956,15.405246,1.601425]}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j','k','l']

kolkata = pd.DataFrame(df3, index= labels)
kolkata

sns.barplot(x="Pollutant",y="value",data=kolkata,palette= "magma")
plt.xticks(rotation=90)
plt.title("kolkata Pollutant Analysis")

"""bivariate

In Kolkata,the concentration of PM10 was found to be the highest among all pollutants followed by PM 2.5 and CO and Xylene being the lowest
"""

plt.figure(figsize=(16,5))
plt.subplot(1,2,1)
sns.lineplot(data=df_kolkata, x="year", y="Vehicular Pollution content")
plt.title('Yearwise Vehicular Pollution content of Kolkata')
plt.subplot(1,2,2)
sns.lineplot(data=df_kolkata, x="year", y="Industrial Pollution content")
plt.title('Yearwise Industrial Pollution content of Kolkata')
plt.show

"""vehicular pollution content showed an increase from 2018-2019 again followed by a decline from 2019-2020

industrial pollution content showed an increase from 2018-2020

multivariate
"""

plt.figure(figsize=(16,8))
plt.subplots_adjust(hspace = 0.5)
plt.subplot(2,2,1)
axis1=sns.lineplot(data=df_kolkata, x="year", y='PM2.5', color = 'r',label='pm2.5')
axis1 =sns.lineplot(data=df_kolkata, x="year", y='PM10', color = 'b',label='pm10')
plt.title('Particulate Matter Distribuition of Kolkata')
plt.legend()
axis1.set_xlabel('')  
plt.subplot(2,2,2)
axis2 = sns.lineplot(data=df_kolkata, x="year", y='NO', color = 'r',label='NO')
axis2 = sns.lineplot(data=df_kolkata, x="year", y='NO2', color = 'b',label='NO2')
axis2 = sns.lineplot(data=df_kolkata, x="year", y='NOx', color = 'g',label='NOx')
plt.title('Nitrous Oxides Distribution of Kolkata')
plt.legend()
axis2.set_xlabel('')  
plt.subplot(2,2,3)
axis3 = sns.lineplot(data=df_kolkata, x="year", y='CO', color = 'r',label='CO')
axis3 = sns.lineplot(data=df_kolkata, x="year", y='SO2', color = 'b',label='SO2')
axis3 = sns.lineplot(data=df_kolkata, x="year", y='O3', color = 'g',label='O3')
plt.title('CO, SO2 & Ground Level Ozone Distribution of Kolkata')
plt.legend()
axis3.set_xlabel('')  
plt.subplot(2,2,4)
axis4 =sns.lineplot(data=df_kolkata, x="year", y='Benzene', color = 'r',label='Benzene')
axis4 =sns.lineplot(data=df_kolkata, x="year", y='Toluene', color = 'b',label='Toluene')
axis4 =sns.lineplot(data=df_kolkata, x="year", y='Xylene', color = 'g',label='Xylene')
plt.title('Benzene, Toluene & Xylene Distribution of Kolkata')
plt.legend() 
axis4.set_xlabel('')  
plt.show()

"""PM 2.5 and PM10 showed a slight increase from 2018-2019 and slight decrease from 2019-2020

NO and NOx showed a slight decrease from 2018-2020

NO2 showed a slight increase from 2018-2019 and decresed from 2019-2020

CO remained constant from 2018-2020

SO2 showed a slight decrease from 2018-2019 and a slight increase from 2019-2020

O3 remained constant from 2018-2019, then a slight increase from 2019-2020

Benzyne and Toluene showed a steep increase from 2018-2019 and decrease from 2019-2020

Xylene showed a slight increase from 2018-2019 and a slight decrease from 2019-2020

# EDA of Lucknow
"""

data_lucknow=data[(data["City"]=="Lucknow")]
data_lucknow=data_lucknow.drop(columns='Date')

data_lucknow.head()

data_lucknow.tail()

df_lucknow=data.iloc[4833:6841]

df_lucknow

"""univariate"""

plt.figure(figsize=(7,7))
df_lucknow['AQI_Bucket'].value_counts().plot(kind='pie',subplots=True, autopct='%1.1f%%')
plt.title('Satisfactory level of Lucknow')

"""The AQI of Lucknow was moderate for almost 29.1% of the period, while good was only 0.84%"""

df4 = {'Pollutant':['PM2.5', "PM10", "NO", "NO2","NOx", "NH3", "CO", "SO2", "O3", "Benzene","Toluene","Xylene"], 
                   'value': [133.787601,10.000000,15.129124,33.195256,23.391274,19.104500,2.126904,12.032111,37.717332,3.515361,5.496730,0.180000]}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j','k','l']
lucknow = pd.DataFrame(df4, index= labels)
lucknow

sns.barplot(x="Pollutant",y="value",data=lucknow,palette= "magma")
plt.xticks(rotation=90)
plt.title("Lucknow Pollutant Analysis")

"""In Lucknow,the concentration of PM2.5 was found to be the highest among all pollutants followed by O3 and CO and Xylene being the lowest

bivariate
"""

plt.figure(figsize=(12,5))
plt.subplot(1,2,1)
sns.lineplot(data=df_lucknow, x="year", y="Vehicular Pollution content")
plt.title('Yearwise Vehicular Pollution content of Lucknow')
plt.subplot(1,2,2)
sns.lineplot(data=df_lucknow, x="year", y="Industrial Pollution content")
plt.title('Yearwise Industrial Pollution content of Lucknow')
plt.show

"""Vehicular pollution content declined from 2015-2016,increased from 2016-2018 and declined through 2019-2020

Industrial pollution content remained constant from 2015-2016,declined from 2016-2018, increased from 2018-2020

multivariate
"""



"""PM10 remained constant and negligble

PM2.5 showed a decline from high through 2015-2016,and declining through 2016-2020

NOx showed a slight increase from 2015-2016,followed by steep rise from 2016-2017,slight increase from 2017-2018 and declined through 2018-2020

NO2 and NO showed slight increase from 2015-2016,followed by an increase from 2016-2018 and declining through 2018-2020

CO declined from 2015-2018 and remained constant through 2018-2020

So2 declined from a high from 2015-2016,followed by slight increase from 2016-2018 and declined from 2018-2020

Xylene remained constant and negligble throughout

Benzene and Toluene increased from 2015-2016,declined from 2016-2018 and increased from 2018-2020

# EDA of Thiruvananthapuram
"""

data_thiruvananthapuram=data[(data["City"]=="Thiruvananthapuram")]
data_thiruvananthapuram=data_thiruvananthapuram.drop(columns='Date')

data_thiruvananthapuram.head()

data_thiruvananthapuram.tail()

df_thiruvananthapuram=data.iloc[6841:]

df_thiruvananthapuram

"""univariate"""

plt.figure(figsize=(7,7))
df_thiruvananthapuram['AQI_Bucket'].value_counts().plot(kind='pie',subplots=True, autopct='%1.1f%%')
plt.title('Satisfactory level of Thiruvananthapuram')

"""The AQI of Thiruvananthapuram  was satisfactory for almost 72.9% of the period, while poor was only 0.4%"""

df5= {'Pollutant':['PM2.5', "PM10", "NO", "NO2","NOx", "NH3", "CO", "SO2", "O3", "Benzene","Toluene","Xylene"], 
                   'value': [27.844344,52.637959,3.396879,9.273147,8.124991,4.884128,0.947851,5.581556,34.160009,7.790000,2.620000,0.180000]}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j','k','l']
thiruvananthapuram = pd.DataFrame(df5, index= labels)
thiruvananthapuram

sns.barplot(x="Pollutant",y="value",data=thiruvananthapuram,palette= "magma")
plt.xticks(rotation=90)
plt.title("Thiruvananthapuram Pollutant Analysis")

"""In Thiruvananthapuram,the concentration of PM10 was found to be the highest among all pollutants followed by PM o3 and CO and Xylene being the lowest

bivariate
"""

plt.figure(figsize=(12,5))
plt.subplot(1,2,1)
sns.lineplot(data=df_thiruvananthapuram, x="year", y="Vehicular Pollution content")
plt.title('Yearwise Vehicular Pollution content of Trivandrum ')
plt.subplot(1,2,2)
sns.lineplot(data=df_thiruvananthapuram, x="year", y="Industrial Pollution content")
plt.title('Yearwise Industrial Pollution content of Trivandrum')
plt.show

"""vehicular pollution content rose from 2017 to 2018, gradually rose between 2016-2017,declined from 2018-2019,followed by a steep rise from 2019-2020

industrial pollution content increased from 2017-2018 and remained constant through 2018-2020

multivariate
"""

plt.figure(figsize=(12,7))
plt.subplots_adjust(hspace = 0.5)
plt.subplot(2,2,1)
axis1=sns.lineplot(data=df_thiruvananthapuram, x="year", y='PM2.5', color = 'r',label='pm2.5')
axis1 =sns.lineplot(data=df_thiruvananthapuram, x="year", y='PM10', color = 'b',label='pm10')
plt.title('Particulate Matter Distribuition of Trivandrum ')
plt.legend()
axis1.set_xlabel('')  
plt.subplot(2,2,2)
axis2 = sns.lineplot(data=df_thiruvananthapuram, x="year", y='NO', color = 'r',label='NO')
axis2 = sns.lineplot(data=df_thiruvananthapuram, x="year", y='NO2', color = 'b',label='NO2')
axis2 = sns.lineplot(data=df_thiruvananthapuram, x="year", y='NOx', color = 'g',label='NOx')
plt.title('Nitrous Oxides Distribution of Trivandrum ')
plt.legend()
axis2.set_xlabel('')  
plt.subplot(2,2,3)
axis3 =sns.lineplot(data=df_thiruvananthapuram, x="year", y='CO', color = 'r',label='CO')
axis3 =sns.lineplot(data=df_thiruvananthapuram, x="year", y='SO2', color = 'b',label='SO2')
axis3 =sns.lineplot(data=df_thiruvananthapuram, x="year", y='O3', color = 'g',label='O3')
plt.title('CO, SO2 & Ground Level Ozone Distribution of Trivandrum')
plt.legend()
axis3.set_xlabel('')  
plt.subplot(2,2,4)
plt.show()

"""PM10 showed an increase from 2017-2018,declined from 2018-2019 and remained constant throughout 2019-2020

PM2.5 showed an increase from 2017-2018,declined from 2018-2019 and remained constant throughout 2019-2020

NO2,NOx and NO showed an increase from 2017-2018,declined from 2018-2019, gradual increase from 2019-2020 

O3 showed a steep rise from 2017-2018, remained constant from 2017-2018 and a slight decline through 2019-2020

CO remained almost constant and negligble throughout

SO2 showed slight increase from 2017-2018,slight decrease from 2018-2019 and slight increase from 2019-2020

Toluene and Xylene remained constant throughout

Benzene remained at a constant high throughout

# Distribution of different pollutants during 2015-2020 of 5 cities
"""

#set date as index
data.set_index('Date',inplace=True)

df_pollutants =data.copy()

pollutants = ['PM2.5', 'PM10', 'NO', 'NO2', 'NOx',
       'NH3', 'CO', 'SO2', 'O3', 'Benzene', 'Toluene', 'Xylene']

df_pollutants =df_pollutants[pollutants]

df_pollutants.plot(kind='line',figsize=(12,12),cmap='coolwarm',subplots=True,fontsize=10)
print('Distribution of different pollutants during 2015-2020')

#load data
data=pd.read_csv('city_data.csv')

#check shape
data.shape

#check columns
data.columns

#drop the column unnamed
data=data.drop(columns='Unnamed: 0')

#get data information
data.info()

"""# DATA PREPROCESSING

FILLING NULL VALUES
"""

#check null values
data.isna().sum()

#backward and forward filling
data['PM2.5'].fillna(method = 'bfill',inplace = True )
data['PM10'].fillna(method = 'bfill',inplace = True )
data['NO'].fillna(method = 'ffill',inplace = True )
data['NO2'].fillna(method = 'ffill',inplace = True )
data['NOx'].fillna(method = 'ffill',inplace = True )
data['NH3'].fillna(method = 'bfill',inplace = True )
data['CO'].fillna(method = 'ffill',inplace = True )
data['SO2'].fillna(method = 'ffill',inplace = True )
data['O3'].fillna(method = 'ffill',inplace = True )
data['Benzene'].fillna(method = 'ffill',inplace = True )
data['Toluene'].fillna(method = 'ffill',inplace = True )
data['Xylene'].fillna(method = 'ffill',inplace = True )
data['AQI'].fillna(method = 'bfill',inplace = True )
data['AQI_Bucket'].fillna(method = 'bfill',inplace = True )

#recheck null values
data.isna().sum()

"""DROP UNNECESSARY COLUMNS"""

data=data.drop('Date',axis=1 )

data

data.rename(columns = {'PM2.5':'Fine_particles', 'PM10':'Coarse_particles'}, inplace = True)

data.columns

data

"""OUTLIER DETECTION"""

num_col = data.select_dtypes(include=np.number).columns.tolist()
plt.figure(figsize=(20,30))

for i, variable in enumerate(num_col):
                     plt.subplot(5,5,i+1)
                     plt.boxplot(data[variable],whis=1.5)
                     plt.tight_layout()
                     plt.title(variable)

for i in num_col:
    Q1=data[i].quantile(0.25) # 25th quantile
    Q3=data[i].quantile(0.75)  # 75th quantile
    IQR=Q3-Q1
    Lower_Whisker = Q1 - 1.5*IQR 
    Upper_Whisker = Q3 + 1.5*IQR
    data[i] = np.clip(data[i], Lower_Whisker, Upper_Whisker)

plt.figure(figsize=(20,30))

for i, variable in enumerate(num_col):
                     plt.subplot(5,5,i+1)
                     plt.boxplot(data[variable],whis=1.5)
                     plt.tight_layout()
                     plt.title(variable)

"""CORRELATION"""

corrmatrix=data.corr()
corrmatrix.style.background_gradient(cmap='coolwarm')

"""# ENCODING

LABEL ENCODING -to convert categorical data to numerical data
"""

#import library
from sklearn.preprocessing import LabelEncoder

#fit the model
label_encoder=LabelEncoder()

data['City']=label_encoder.fit_transform(data['City'])

data['AQI_Bucket']=label_encoder.fit_transform(data['AQI_Bucket'])

data

#data=data.drop(['City'], axis=1)

data.head()

"""standard scaling"""

X=data.drop(['City','AQI','AQI_Bucket'],axis=1)
y=data['AQI']

y

X

X.describe()

#import library
from sklearn.preprocessing import StandardScaler

#fitting the model
scaler=StandardScaler()
X=scaler.fit_transform(X)

type(X)

X=pd.DataFrame(X,columns=['Fine_particles', 'Coarse_particles', 'NO', 'NO2', 'NOx','NH3', 'CO', 'SO2', 'O3','Benzene','Toluene','Xylene'])

X

y

X.describe()

X.shape

y.shape

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)

"""## Modelling

### **1. Support Vector Regression**
"""

from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, r2_score

param_grid = {'C':[0.8],
             'kernel':['rbf'],
              'epsilon':[0.2]}

from sklearn.model_selection import GridSearchCV

svr = SVR()
grid = GridSearchCV(svr,param_grid=param_grid)

grid.fit(X_train,y_train)

grid.best_params_

model_predict=grid.predict(X_test)

print('Mean Squared Error is',mean_squared_error(y_test,model_predict))
print('R Squared Value is',r2_score(y_test,model_predict))
print('RMSE:', np.sqrt(mean_squared_error(y_test, model_predict)))

MSE_svr=mean_squared_error(y_test,model_predict)
R2_svr=r2_score(y_test,model_predict)
RMSE_svr= np.sqrt(mean_squared_error(y_test, model_predict))

X

data.head()

predictedAQI =grid.predict([[-0.125654,	0.339070,	-1.002317,	-0.701972,	-0.626559,	0.464434,	-0.612915	,0.652256	,2.326095	,-1.046014	,-0.902895	,-0.796089]])
print(predictedAQI)

"""### **2.Linear Regression**"""

from sklearn.linear_model import LinearRegression

lr=LinearRegression()
model=lr.fit(X_train,y_train)
predictions=model.predict(X_test)
print(model.intercept_)
print(model.coef_)

print('Mean Squared Error is',mean_squared_error(y_test,predictions))
print('R Squared Value is',r2_score(y_test,predictions))
print('RMSE:', np.sqrt(mean_squared_error(y_test, predictions)))
print("Accuracy", model.score(X_test,y_test)*100)

MSE_lr=mean_squared_error(y_test,predictions)
R2_lr=r2_score(y_test,predictions)
RMSE_lr= np.sqrt(mean_squared_error(y_test, predictions))

predictedAQI =lr.predict([[-0.125654,	0.339070,	-1.002317,	-0.701972,	-0.626559,	0.464434,	-0.612915	,0.652256	,2.326095	,-1.046014	,-0.902895	,-0.796089]])
print(predictedAQI)

"""### **3.Lasso Regression**"""

from sklearn.linear_model import Lasso

lasso=Lasso()
model_lasso=lasso.fit(X_train,y_train)
predictions=model_lasso.predict(X_test)

print('Mean Squared Error is',mean_squared_error(y_test,predictions))
print('R Squared Value is',r2_score(y_test,predictions))
print('RMSE:', np.sqrt(mean_squared_error(y_test, predictions)))
print("Accuracy", model_lasso.score(X_test,y_test)*100)

MSE_lasso= mean_squared_error(y_test,predictions)
R2_lasso=r2_score(y_test,predictions)
RMSE_lasso= np.sqrt(mean_squared_error(y_test, predictions))

predictedAQI =lasso.predict([[-0.125654,	0.339070,	-1.002317,	-0.701972,	-0.626559,	0.464434,	-0.612915	,0.652256	,2.326095	,-1.046014	,-0.902895	,-0.796089]])
print(predictedAQI)

y

"""### **4.Multiple Linear Regression**"""

mlr = LinearRegression()  
model_mr=mlr.fit(X_train, y_train)

print("Intercept: ", mlr.intercept_)
print("Coefficients:")
list(zip(X, mlr.coef_))

#Prediction of test set
y_pred_mlr= mlr.predict(X_test)
#Predicted values
print("Prediction for test set: {}".format(y_pred_mlr))

#Actual value and the predicted value
mlr_diff = pd.DataFrame({'Actual value': y_test, 'Predicted value': y_pred_mlr})
mlr_diff.head()

#Model Evaluation
from sklearn import metrics
meanAbErr = metrics.mean_absolute_error(y_test, y_pred_mlr)
meanSqErr = metrics.mean_squared_error(y_test, y_pred_mlr)
rootMeanSqErr = np.sqrt(metrics.mean_squared_error(y_test, y_pred_mlr))

print('R squared: {:.2f}'.format(mlr.score(X,y)))
print('Mean Absolute Error:', meanAbErr)
print('Mean Square Error:', meanSqErr)
print('RMSE:', rootMeanSqErr)
print("Accuracy",model_mr.score(X_test,y_test)*100)

MSE_mlr=meanSqErr

R2_mlr= r2_score(y_test,y_pred_mlr)
R2_mlr

RMSE_mlr= rootMeanSqErr

predictedAQI =mlr.predict([[-0.125654,	0.339070,	-1.002317,	-0.701972,	-0.626559,	0.464434,	-0.612915	,0.652256	,2.326095	,-1.046014	,-0.902895	,-0.796089]])
print(predictedAQI)

"""### **5.Stochastic Gradient Descent**"""

from sklearn.linear_model import SGDRegressor

sgd_reg = SGDRegressor( penalty="l1",
                       max_iter=10_000, tol=None, eta0=0.0001,
                       learning_rate="constant", random_state=42)
sgd_reg.fit(X_train, y_train)

test_pred = sgd_reg.predict(X_test)
train_pred = sgd_reg.predict(X_train)

print('Mean Squared Error is',mean_squared_error(y_test,test_pred))
print('R Squared Value is',r2_score(y_test,test_pred))
print('RMSE:', np.sqrt(mean_squared_error(y_test, test_pred)))
print("Accuracy", sgd_reg.score(X_test,y_test)*100)

MSE_sgd=mean_squared_error(y_test,test_pred)
R2_sgd=r2_score(y_test,test_pred)
RMSE_sgd= np.sqrt(mean_squared_error(y_test, test_pred))

predictedAQI =sgd_reg.predict([[-0.125654,	0.339070,	-1.002317,	-0.701972,	-0.626559,	0.464434,	-0.612915	,0.652256	,2.326095	,-1.046014	,-0.902895	,-0.796089]])
print(predictedAQI)

"""### **6. Random Forest Regressor**"""

from sklearn.ensemble import RandomForestRegressor
rf_reg = RandomForestRegressor()
rf_reg.fit(X_train, y_train)

test_pred = rf_reg.predict(X_test)
train_pred = rf_reg.predict(X_train)

print('Mean Squared Error is',mean_squared_error(y_test,test_pred))
print('R Squared Value is',r2_score(y_test,test_pred))
print('RMSE:', np.sqrt(mean_squared_error(y_test, test_pred)))
print("Accuracy", rf_reg.score(X_test,y_test)*100)

MSE_rf=mean_squared_error(y_test,test_pred)
R2_rf=r2_score(y_test,test_pred)
RMSE_rf= np.sqrt(mean_squared_error(y_test, test_pred))

predictedAQI =rf_reg.predict([[-0.125654,	0.339070,	-1.002317,	-0.701972,	-0.626559,	0.464434,	-0.612915	,0.652256	,2.326095	,-1.046014	,-0.902895	,-0.796089 ]])
print(predictedAQI)

"""### **7.Ridge regression**"""

from sklearn.linear_model import Ridge

rr=Ridge(alpha=1)

rr.fit(X_train, y_train)

predictions=model.predict(X_test)

print('Mean Squared Error is',mean_squared_error(y_test,predictions))
print('R Squared Value is',r2_score(y_test,predictions))
print('RMSE:', np.sqrt(mean_squared_error(y_test, predictions)))
print("Accuracy", rr.score(X_test,y_test)*100)

MSE_rr=mean_squared_error(y_test,predictions)
R2_rr=r2_score(y_test,predictions)
RMSE_rr= np.sqrt(mean_squared_error(y_test, predictions))

predictedAQI =rr.predict([[-0.125654,	0.339070,	-1.002317,	-0.701972,	-0.626559,	0.464434,	-0.612915	,0.652256	,2.326095	,-1.046014	,-0.902895	,-0.796089]])
print(predictedAQI)

"""### **8.Elastic Net Regression**"""

from sklearn.linear_model import ElasticNet

model_enet = ElasticNet()
model_enet.fit(X_train, y_train) 
pred_train_enet= model_enet.predict(X_train)
print(mean_squared_error(y_train, pred_train_enet))
print(np.sqrt(mean_squared_error(y_train,pred_train_enet)))
print(r2_score(y_train, pred_train_enet))
print("Accuracy", model_enet.score(X_test,y_test)*100)

MSE_enet=mean_squared_error(y_train, pred_train_enet)
R2_enet=r2_score(y_train, pred_train_enet)
RMSE_enet=np.sqrt(mean_squared_error(y_train,pred_train_enet))

predictedAQI =model_enet.predict([[-0.125654,	0.339070,	-1.002317,	-0.701972,	-0.626559,	0.464434,	-0.612915	,0.652256	,2.326095	,-1.046014	,-0.902895	,-0.796089 ]])
print(predictedAQI)

"""### **9.Partial least squares regression**"""

from sklearn.cross_decomposition import PLSRegression, PLSSVD

pls_model = PLSRegression().fit(X_train, y_train)

pls_model.predict(X_train)

y_pred = pls_model.predict(X_train)

mean_squared_error(y_train, y_pred)

np.sqrt(mean_squared_error(y_train, y_pred))

r2_score(y_train, y_pred)

MSE_pls=mean_squared_error(y_train, y_pred)
R2_pls=r2_score(y_train, y_pred)
RMSE_pls= np.sqrt(mean_squared_error(y_train, y_pred))

predictedAQI =pls_model.predict([[-0.125654,	0.339070,	-1.002317,	-0.701972,	-0.626559,	0.464434,	-0.612915	,0.652256	,2.326095	,-1.046014	,-0.902895	,-0.796089 ]])
print(predictedAQI)

"""### **10.Decision tree regression**"""

from sklearn.tree import DecisionTreeRegressor
tree = DecisionTreeRegressor(criterion='mse')
tree.fit(X_train, y_train)

y_pred=tree.predict(X_test)

print('R squared value is:',r2_score(y_test,y_pred))
print('MSE:', mean_squared_error(y_test, y_pred))
print('RMSE:', np.sqrt(mean_squared_error(y_test, y_pred)))
print("Accuracy", tree.score(X_test,y_test)*100)

MSE_tree=mean_squared_error(y_test, y_pred)
R2_tree=r2_score(y_test, y_pred)
RMSE_tree= np.sqrt(mean_squared_error(y_test, y_pred))

predictedAQI =tree.predict([[-0.125654,	0.339070,	-1.002317,	-0.701972,	-0.626559,	0.464434,	-0.612915	,0.652256	,2.326095	,-1.046014	,-0.902895	,-0.796089 ]])
print(predictedAQI)

"""### **11.Polynomial regression**"""

from sklearn.preprocessing import PolynomialFeatures
poly = PolynomialFeatures(degree=2, include_bias= False)
x_train_trans= poly.fit_transform(X_train)
x_test_trans=poly.transform(X_test)
lr=LinearRegression()
lr.fit(x_train_trans,y_train)
y_pred=lr.predict(x_test_trans)

print('Mean Squared Error is',mean_squared_error(y_test,y_pred))
print('R Squared Value is',r2_score(y_test,y_pred))
print('RMSE:', np.sqrt(mean_squared_error(y_test,y_pred)))

MSE_pr= mean_squared_error(y_test,y_pred)
R2_pr=   r2_score(y_test,y_pred)
poly_reg_rmse= np.sqrt(mean_squared_error(y_test,y_pred))

"""Comparison"""

results = pd.DataFrame({'Model': ['Support Vector Regression','Linear Regression','Lasso Regression','Multiple Linear Regression','Stochastic Gradient Descent Regression','Random Forest Regression','Ridge regression','Elastic Net Regression','Partial least squares regression','Decision Tree','Polynomial Regression'],'Mean Squared Error': [MSE_svr,MSE_lr,MSE_lasso,MSE_mlr,MSE_sgd,MSE_rf,MSE_rr,MSE_enet,MSE_pls,MSE_tree,MSE_pr],'R2 Score':[R2_svr,R2_lr,R2_lasso,R2_mlr,R2_sgd,R2_rf,R2_rr,R2_enet,R2_pls,R2_tree,R2_pr],'Root Mean Squared Error':[RMSE_svr,RMSE_lr,RMSE_lasso,RMSE_mlr,RMSE_sgd,RMSE_rf,RMSE_rr,RMSE_enet,RMSE_pls,RMSE_tree,poly_reg_rmse]})
results

result_df=results.sort_values(by='R2 Score',ascending=False)
result_df = result_df.set_index('Model')
result_df

plt.figure(figsize=(9,5))
plt.plot(range(1,12),[MSE_svr,MSE_lr,MSE_lasso,MSE_mlr,MSE_sgd,MSE_rf,MSE_rr,MSE_enet,MSE_pls,MSE_tree,MSE_pr],marker='o',label="Mean Squared Error")
plt.plot(range(1,12),[R2_svr,R2_lr,R2_lasso,R2_mlr,R2_sgd,R2_rf,R2_rr,R2_enet,R2_pls,R2_tree,R2_pr],marker='*',label="R2 Score")
plt.plot(range(1,12),[RMSE_svr,RMSE_lr,RMSE_lasso,RMSE_mlr,RMSE_sgd,RMSE_rf,RMSE_rr,RMSE_enet,RMSE_pls,RMSE_tree,poly_reg_rmse],marker='+',label="Root Mean Squared Error")
plt.xticks(range(1,12),['Support Vector Regression','Linear Regression','Lasso Regression','Multiple Linear Regression','Stochastic Gradient Descent Regression','Random Forest Regression','Ridge regression','Elastic Net Regression','Partial least squares regression','Decision tree regression','Polynomial Regression'],rotation=90)
plt.legend(loc= 'upper right')
plt.title('Accuracy of Various Models')
plt.xlabel('Models')
plt.ylabel("")
plt.show()

plt.figure(figsize=(9,5))
plt.plot(range(1,12),[RMSE_svr,RMSE_lr,RMSE_lasso,RMSE_mlr,RMSE_sgd,RMSE_rf,RMSE_rr,RMSE_enet,RMSE_pls,RMSE_tree,poly_reg_rmse],marker='+',label="Root Mean Squared Error")
plt.xticks(range(1,12),['Support Vector Regression','Linear Regression','Lasso Regression','Multiple Linear Regression','Stochastic Gradient Descent Regression','Random Forest Regression','Ridge regression','Elastic Net Regression','Partial least squares regression','Decision tree regression','Polynomial Regression'],rotation=90)
plt.title('RootMeanSquare Error')
plt.show()

plt.xticks(range(1,12),['Support Vector Regression','Linear Regression','Lasso Regression','Multiple Linear Regression','Stochastic Gradient Descent Regression','Random Forest Regression','Ridge regression','Elastic Net Regression','Partial least squares regression','Decision tree regression','Polynomial Regression'],rotation=90)
plt.plot(range(1,12),[R2_svr,R2_lr,R2_lasso,R2_mlr,R2_sgd,R2_rf,R2_rr,R2_enet,R2_pls,R2_tree,R2_pr],marker='*',label="R2 Score")
plt.title('R2 SCORE')
plt.show()

"""**Random forest regression has an accuarcy of 90%**"""

# save the model
import pickle
filename = 'model.pkl'
pickle.dump(rf_reg, open(filename, 'wb'))